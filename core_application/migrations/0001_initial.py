# Generated by Django 5.2 on 2025-07-25 05:44

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=10, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('author', models.CharField(max_length=200)),
                ('isbn', models.CharField(blank=True, max_length=20, unique=True)),
                ('publisher', models.CharField(max_length=100)),
                ('publication_year', models.IntegerField()),
                ('edition', models.CharField(blank=True, max_length=20)),
                ('category', models.CharField(choices=[('nursing', 'Nursing'), ('medical', 'Medical'), ('pharmacy', 'Pharmacy'), ('laboratory', 'Laboratory Medicine'), ('clinical_medicine', 'Clinical Medicine'), ('public_health', 'Public Health'), ('reference', 'Reference'), ('research', 'Research'), ('general', 'General')], default='general', max_length=20)),
                ('total_copies', models.IntegerField(default=1)),
                ('available_copies', models.IntegerField(default=1)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('location_code', models.CharField(blank=True, help_text='Library shelf location', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='ClinicalSite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('facility_type', models.CharField(choices=[('national_referral', 'National Referral Hospital'), ('county_referral', 'County Referral Hospital'), ('sub_county', 'Sub-County Hospital'), ('health_centre', 'Health Centre'), ('dispensary', 'Dispensary'), ('private_hospital', 'Private Hospital'), ('specialized', 'Specialized Facility')], max_length=30)),
                ('county', models.CharField(max_length=50)),
                ('sub_county', models.CharField(max_length=50)),
                ('address', models.TextField()),
                ('contact_person', models.CharField(max_length=100)),
                ('contact_phone', models.CharField(max_length=15)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('capacity', models.IntegerField(help_text='Maximum number of students')),
                ('mou_start_date', models.DateField(help_text='MOU start date')),
                ('mou_end_date', models.DateField(help_text='MOU end date')),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_repeat', models.BooleanField(default=False, help_text='Is this a repeat unit?')),
            ],
        ),
        migrations.CreateModel(
            name='Hostel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('hostel_type', models.CharField(choices=[('male', 'Male Hostel'), ('female', 'Female Hostel'), ('mixed', 'Mixed Hostel')], max_length=10)),
                ('total_rooms', models.IntegerField()),
                ('capacity', models.IntegerField()),
                ('warden_name', models.CharField(max_length=100)),
                ('warden_contact', models.CharField(max_length=15)),
                ('facilities', models.TextField(help_text='Available facilities')),
                ('rules_regulations', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProfessionalBody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('website', models.URLField(blank=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('registration_requirements', models.TextField()),
                ('annual_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
            options={
                'verbose_name_plural': 'Professional Bodies',
            },
        ),
        migrations.CreateModel(
            name='Programme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', models.CharField(max_length=15, unique=True)),
                ('programme_type', models.CharField(choices=[('diploma', 'Diploma'), ('certificate', 'Certificate'), ('higher_diploma', 'Higher Diploma')], max_length=20)),
                ('category', models.CharField(choices=[('nursing', 'Nursing'), ('medical_laboratory', 'Medical Laboratory'), ('clinical_medicine', 'Clinical Medicine'), ('pharmaceutical', 'Pharmaceutical'), ('dental', 'Dental'), ('medical_imaging', 'Medical Imaging'), ('occupational_therapy', 'Occupational Therapy'), ('physiotherapy', 'Physiotherapy'), ('health_records', 'Health Records'), ('community_health', 'Community Health'), ('environmental_health', 'Environmental Health'), ('nutrition', 'Nutrition')], max_length=30)),
                ('duration_years', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('semesters_per_year', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(3)])),
                ('total_semesters', models.IntegerField(validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(12)])),
                ('description', models.TextField(blank=True)),
                ('entry_requirements', models.TextField()),
                ('career_prospects', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudentService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('service_type', models.CharField(choices=[('medical', 'Medical Services'), ('counseling', 'Counseling Services'), ('chaplaincy', 'Chaplaincy Services'), ('sports', 'Sports & Recreation'), ('career', 'Career Guidance'), ('financial_aid', 'Financial Aid'), ('disability', 'Disability Support')], max_length=20)),
                ('description', models.TextField()),
                ('contact_person', models.CharField(max_length=100)),
                ('contact_phone', models.CharField(max_length=15)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('location', models.CharField(max_length=100)),
                ('operating_hours', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('venue_code', models.CharField(max_length=20, unique=True)),
                ('venue_type', models.CharField(choices=[('classroom', 'Classroom'), ('laboratory', 'Laboratory'), ('skills_lab', 'Skills Laboratory'), ('computer_lab', 'Computer Laboratory'), ('workshop', 'Workshop'), ('auditorium', 'Auditorium'), ('clinical_area', 'Clinical Area')], max_length=20)),
                ('capacity', models.IntegerField()),
                ('floor', models.CharField(max_length=10)),
                ('building', models.CharField(max_length=50)),
                ('has_projector', models.BooleanField(default=False)),
                ('has_computer', models.BooleanField(default=False)),
                ('has_internet', models.BooleanField(default=False)),
                ('equipment_available', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_/ allowed.', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Username can contain letters, numbers, @, ., +, -, _, and / characters only.', regex='^[\\w.@+\\-/]+$')])),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('student', 'Student'), ('instructor', 'Instructor'), ('clinical_instructor', 'Clinical Instructor'), ('staff', 'Staff'), ('registrar', 'Registrar')], max_length=20)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('address', models.TextField(blank=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('national_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FeeStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('semester', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('tuition_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('registration_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('examination_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('library_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('laboratory_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('clinical_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('accommodation_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('meals_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('medical_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('insurance_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('activity_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('other_fees', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('government_subsidy', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='core_application.academicyear')),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='core_application.programme')),
            ],
            options={
                'unique_together': {('programme', 'academic_year', 'year', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theory_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('practical_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('clinical_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('continuous_assessment', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('final_exam_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('grade', models.CharField(blank=True, choices=[('A', 'A (80-100)'), ('B+', 'B+ (75-79)'), ('B', 'B (70-74)'), ('B-', 'B- (65-69)'), ('C+', 'C+ (60-64)'), ('C', 'C (55-59)'), ('C-', 'C- (50-54)'), ('D+', 'D+ (45-49)'), ('D', 'D (40-44)'), ('E', 'E (Below 40)'), ('I', 'Incomplete'), ('W', 'Withdrawn')], max_length=2)),
                ('grade_points', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('is_passed', models.BooleanField(default=False)),
                ('exam_date', models.DateField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True)),
                ('enrollment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='grade', to='core_application.enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('general', 'General Announcement'), ('academic', 'Academic Notice'), ('fee', 'Fee Related'), ('exam', 'Examination'), ('clinical', 'Clinical Training'), ('hostel', 'Hostel/Accommodation'), ('emergency', 'Emergency')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('target_years', models.CharField(blank=True, help_text='Comma separated years e.g., 1,2,3', max_length=20)),
                ('is_global', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_notifications', to=settings.AUTH_USER_MODEL)),
                ('target_users', models.ManyToManyField(blank=True, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('target_programmes', models.ManyToManyField(blank=True, related_name='notifications', to='core_application.programme')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.CharField(max_length=20)),
                ('room_type', models.CharField(choices=[('single', 'Single Room'), ('double', 'Double Room'), ('triple', 'Triple Room'), ('dormitory', 'Dormitory')], max_length=15)),
                ('capacity', models.IntegerField()),
                ('floor', models.CharField(max_length=10)),
                ('facilities', models.TextField(blank=True)),
                ('monthly_rent', models.DecimalField(decimal_places=2, max_digits=8)),
                ('is_available', models.BooleanField(default=True)),
                ('hostel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='core_application.hostel')),
            ],
            options={
                'unique_together': {('hostel', 'room_number')},
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('established_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('dean', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='headed_schools', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='programme',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programmes', to='core_application.school'),
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_number', models.CharField(max_length=20, unique=True)),
                ('designation', models.CharField(choices=[('principal', 'Principal'), ('deputy_principal', 'Deputy Principal'), ('senior_lecturer', 'Senior Lecturer'), ('lecturer', 'Lecturer'), ('assistant_lecturer', 'Assistant Lecturer'), ('clinical_instructor', 'Clinical Instructor'), ('tutor', 'Tutor')], max_length=30)),
                ('employment_type', models.CharField(choices=[('permanent', 'Permanent'), ('contract', 'Contract'), ('part_time', 'Part Time'), ('visiting', 'Visiting')], default='permanent', max_length=20)),
                ('qualifications', models.TextField()),
                ('specialization', models.CharField(blank=True, max_length=200)),
                ('professional_registration', models.CharField(blank=True, help_text='Professional body registration number', max_length=100)),
                ('experience_years', models.IntegerField(default=0)),
                ('clinical_experience_years', models.IntegerField(default=0)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('joining_date', models.DateField()),
                ('contract_end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='instructor_profile', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instructors', to='core_application.school')),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('registration_start_date', models.DateField()),
                ('registration_end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='semesters', to='core_application.academicyear')),
            ],
            options={
                'ordering': ['academic_year', 'semester_number'],
                'unique_together': {('academic_year', 'semester_number')},
            },
        ),
        migrations.CreateModel(
            name='Examination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('exam_type', models.CharField(choices=[('continuous_assessment', 'Continuous Assessment'), ('mid_semester', 'Mid Semester'), ('end_semester', 'End Semester'), ('practical', 'Practical Exam'), ('clinical', 'Clinical Assessment'), ('supplementary', 'Supplementary Exam'), ('special', 'Special Exam')], max_length=25)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('application_deadline', models.DateField(help_text='Deadline for exam application')),
                ('max_marks', models.IntegerField(default=100)),
                ('pass_marks', models.IntegerField(default=50)),
                ('is_active', models.BooleanField(default=True)),
                ('instructions', models.TextField(blank=True)),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='examinations', to='core_application.semester')),
            ],
        ),
        migrations.AddField(
            model_name='enrollment',
            name='semester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core_application.semester'),
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_number', models.CharField(max_length=20, unique=True)),
                ('staff_category', models.CharField(choices=[('administrative', 'Administrative'), ('technical', 'Technical Support'), ('library', 'Library Staff'), ('laboratory', 'Laboratory Technician'), ('maintenance', 'Maintenance'), ('security', 'Security'), ('catering', 'Catering'), ('transport', 'Transport')], max_length=20)),
                ('designation', models.CharField(max_length=100)),
                ('job_description', models.TextField(blank=True)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('joining_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core_application.school')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(max_length=20, unique=True)),
                ('current_year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('current_semester', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('admission_date', models.DateField()),
                ('admission_type', models.CharField(choices=[('direct', 'Direct Entry'), ('parallel', 'Parallel Programme'), ('upgrading', 'Upgrading'), ('transfer', 'Transfer')], default='direct', max_length=20)),
                ('sponsor_type', models.CharField(choices=[('government', 'Government Sponsored'), ('self', 'Self Sponsored'), ('employer', 'Employer Sponsored'), ('scholarship', 'Scholarship'), ('bursary', 'Bursary')], default='government', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('graduated', 'Graduated'), ('deferred', 'Deferred'), ('suspended', 'Suspended'), ('discontinued', 'Discontinued'), ('expelled', 'Expelled')], default='active', max_length=20)),
                ('guardian_name', models.CharField(max_length=100)),
                ('guardian_phone', models.CharField(max_length=15)),
                ('guardian_relationship', models.CharField(max_length=50)),
                ('guardian_address', models.TextField()),
                ('emergency_contact', models.CharField(max_length=15)),
                ('blood_group', models.CharField(blank=True, max_length=5)),
                ('medical_conditions', models.TextField(blank=True, help_text='Any medical conditions or allergies')),
                ('expected_graduation_date', models.DateField(blank=True, null=True)),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='core_application.programme')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProfessionalRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(blank=True, max_length=50)),
                ('application_date', models.DateField()),
                ('approval_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=15)),
                ('certificate_file', models.FileField(blank=True, null=True, upload_to='professional_certificates/')),
                ('professional_body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='core_application.professionalbody')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='professional_registrations', to='core_application.student')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_date', models.DateField()),
                ('symptoms', models.TextField()),
                ('diagnosis', models.TextField()),
                ('treatment', models.TextField()),
                ('prescribed_medication', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('medical_officer', models.CharField(max_length=100)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_visits', to='core_application.student')),
            ],
            options={
                'ordering': ['-visit_date'],
            },
        ),
        migrations.CreateModel(
            name='FeePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_number', models.CharField(max_length=50, unique=True)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField()),
                ('payment_method', models.CharField(choices=[('mpesa', 'M-Pesa'), ('bank_transfer', 'Bank Transfer'), ('cash', 'Cash'), ('cheque', 'Cheque'), ('bankers_cheque', 'Bankers Cheque'), ('online', 'Online Payment')], max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('reversed', 'Reversed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('transaction_reference', models.CharField(blank=True, max_length=100)),
                ('mpesa_receipt', models.CharField(blank=True, max_length=50)),
                ('bank_slip_number', models.CharField(blank=True, max_length=50)),
                ('remarks', models.TextField(blank=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('fee_structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='core_application.feestructure')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_payments', to='core_application.student')),
            ],
        ),
        migrations.AddField(
            model_name='enrollment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core_application.student'),
        ),
        migrations.CreateModel(
            name='BookIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_date', models.DateField(auto_now_add=True)),
                ('due_date', models.DateField()),
                ('return_date', models.DateField(blank=True, null=True)),
                ('renewal_count', models.IntegerField(default=0)),
                ('fine_amount', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('is_returned', models.BooleanField(default=False)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='core_application.book')),
                ('issued_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issued_books', to=settings.AUTH_USER_MODEL)),
                ('returned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='returned_books', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_issues', to='core_application.student')),
            ],
        ),
        migrations.CreateModel(
            name='Alumni',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('graduation_date', models.DateField()),
                ('current_employer', models.CharField(blank=True, max_length=200)),
                ('current_position', models.CharField(blank=True, max_length=100)),
                ('work_phone', models.CharField(blank=True, max_length=15)),
                ('work_email', models.EmailField(blank=True, max_length=254)),
                ('achievements', models.TextField(blank=True)),
                ('is_willing_mentor', models.BooleanField(default=False)),
                ('professional_registrations', models.TextField(blank=True)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='alumni_profile', to='core_application.student')),
            ],
            options={
                'verbose_name_plural': 'Alumni',
            },
        ),
        migrations.CreateModel(
            name='StudentComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('academic', 'Academic Issue'), ('fee', 'Fee Related'), ('hostel', 'Hostel/Accommodation'), ('clinical', 'Clinical Training'), ('general', 'General Query'), ('complaint', 'Complaint'), ('suggestion', 'Suggestion')], default='general', max_length=20)),
                ('subject', models.CharField(max_length=200)),
                ('comment', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('admin_response', models.TextField(blank=True, null=True)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responded_comments', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core_application.student')),
            ],
            options={
                'verbose_name': 'Student Comment',
                'verbose_name_plural': 'Student Comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentMedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_history', models.TextField(blank=True)),
                ('allergies', models.TextField(blank=True)),
                ('current_medications', models.TextField(blank=True)),
                ('emergency_medical_contact', models.CharField(max_length=100)),
                ('emergency_medical_phone', models.CharField(max_length=15)),
                ('insurance_provider', models.CharField(blank=True, max_length=100)),
                ('insurance_number', models.CharField(blank=True, max_length=50)),
                ('last_medical_checkup', models.DateField(blank=True, null=True)),
                ('vaccinations', models.TextField(blank=True, help_text='Record of vaccinations')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='medical_record', to='core_application.student')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=15)),
                ('response', models.TextField(blank=True)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to='core_application.student')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='core_application.studentservice')),
            ],
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_type', models.CharField(choices=[('academic', 'Academic Settings'), ('fee', 'Fee Settings'), ('notification', 'Notification Settings'), ('general', 'General Settings')], max_length=20)),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
                'unique_together': {('day_of_week', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', models.CharField(max_length=15, unique=True)),
                ('unit_type', models.CharField(choices=[('core', 'Core Unit'), ('elective', 'Elective Unit'), ('clinical', 'Clinical Unit'), ('practical', 'Practical Unit'), ('theory', 'Theory Unit')], default='core', max_length=20)),
                ('credit_hours', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(15)])),
                ('theory_hours', models.IntegerField(default=0)),
                ('practical_hours', models.IntegerField(default=0)),
                ('clinical_hours', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True)),
                ('learning_outcomes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('prerequisites', models.ManyToManyField(blank=True, related_name='prerequisite_for', to='core_application.unit')),
            ],
        ),
        migrations.CreateModel(
            name='ResearchProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('project_type', models.CharField(choices=[('final_year', 'Final Year Project'), ('research', 'Research Project'), ('case_study', 'Case Study'), ('community', 'Community Health Project')], max_length=20)),
                ('description', models.TextField()),
                ('start_date', models.DateField()),
                ('submission_date', models.DateField()),
                ('is_completed', models.BooleanField(default=False)),
                ('grade', models.CharField(blank=True, max_length=2)),
                ('supervisor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supervised_projects', to='core_application.instructor')),
                ('students', models.ManyToManyField(related_name='research_projects', to='core_application.student')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core_application.unit')),
            ],
        ),
        migrations.CreateModel(
            name='QualityAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('unit_evaluation', 'Unit Evaluation'), ('instructor_evaluation', 'Instructor Evaluation'), ('clinical_site_evaluation', 'Clinical Site Evaluation'), ('facility_evaluation', 'Facility Evaluation')], max_length=25)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('target_clinical_site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core_application.clinicalsite')),
                ('target_instructor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core_application.instructor')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_assessments', to='core_application.semester')),
                ('target_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core_application.unit')),
            ],
        ),
        migrations.AddField(
            model_name='enrollment',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core_application.unit'),
        ),
        migrations.AddField(
            model_name='clinicalsite',
            name='specializations',
            field=models.ManyToManyField(blank=True, help_text='Units that can be done at this site', to='core_application.unit'),
        ),
        migrations.AddField(
            model_name='book',
            name='related_units',
            field=models.ManyToManyField(blank=True, related_name='recommended_books', to='core_application.unit'),
        ),
        migrations.CreateModel(
            name='ExamSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('exam_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('max_marks', models.IntegerField(default=100)),
                ('duration_minutes', models.IntegerField(default=180)),
                ('special_instructions', models.TextField(blank=True)),
                ('examination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='core_application.examination')),
                ('invigilators', models.ManyToManyField(blank=True, related_name='invigilated_exams', to='core_application.instructor')),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_schedules', to='core_application.programme')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_schedules', to='core_application.unit')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_schedules', to='core_application.venue')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationRead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_at', models.DateTimeField(auto_now_add=True)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reads', to='core_application.notification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_reads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('notification', 'user')},
            },
        ),
        migrations.CreateModel(
            name='QualityAssessmentResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('responses', models.JSONField()),
                ('additional_comments', models.TextField(blank=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='core_application.qualityassessment')),
                ('respondent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_responses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('assessment', 'respondent')},
            },
        ),
        migrations.CreateModel(
            name='RoomAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocation_date', models.DateField(auto_now_add=True)),
                ('checkout_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_allocations', to='core_application.academicyear')),
                ('allocated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='core_application.room')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_allocations', to='core_application.student')),
            ],
            options={
                'unique_together': {('student', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='ProgrammeUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('semester', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('is_mandatory', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programme_units', to='core_application.programme')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_programmes', to='core_application.unit')),
            ],
            options={
                'ordering': ['year', 'semester', 'unit__name'],
                'unique_together': {('programme', 'unit', 'year', 'semester')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together={('student', 'unit', 'semester')},
        ),
        migrations.CreateModel(
            name='ClinicalPlacement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('supervisor_name', models.CharField(help_text='Clinical supervisor at the facility', max_length=100)),
                ('supervisor_contact', models.CharField(blank=True, max_length=15)),
                ('is_completed', models.BooleanField(default=False)),
                ('completion_report', models.TextField(blank=True)),
                ('clinical_site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='placements', to='core_application.clinicalsite')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_placements', to='core_application.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_placements', to='core_application.student')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_placements', to='core_application.unit')),
            ],
            options={
                'unique_together': {('student', 'unit', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('session_type', models.CharField(choices=[('theory', 'Theory'), ('practical', 'Practical'), ('clinical', 'Clinical')], max_length=20)),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('excused', 'Excused Absence'), ('sick', 'Sick Leave')], max_length=10)),
                ('remarks', models.TextField(blank=True)),
                ('marked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core_application.instructor')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='core_application.student')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='core_application.unit')),
            ],
            options={
                'unique_together': {('student', 'unit', 'date', 'session_type')},
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('session_type', models.CharField(choices=[('theory', 'Theory'), ('practical', 'Practical'), ('clinical', 'Clinical')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='core_application.instructor')),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='core_application.programme')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='core_application.semester')),
                ('time_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='core_application.timeslot')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='core_application.unit')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='core_application.venue')),
            ],
            options={
                'unique_together': {('venue', 'time_slot', 'semester')},
            },
        ),
    ]
